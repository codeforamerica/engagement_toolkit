<?php

include_once('ideation.features.inc');

define('ideation_IDEA_TYPE_SITE', 'idea_site');

/**
 * Implementation of hook_init().
 */
function ideation_init() {
  drupal_add_css(drupal_get_path('module', 'ideation') .'/ideation.css', array('group' => CSS_DEFAULT, 'weight' => 100));    
}

/**
* Make sure that ideation nodes are not created/edited in admin interface
*/
function ideation_admin_paths_alter(&$paths) {
  
  $arg1 = arg(1);  
  $idea_node_add_page  = (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'idea-site');
  $node_edit_page = (arg(0) == 'node' && !empty($arg1) && is_numeric($arg1) && arg(2) == 'edit');
  $idea_node_edit_page = FALSE;  
  
  if ($node_edit_page) {
    $node_id = arg(1);
    $node = node_load($node_id);

    if ($node->type == 'idea_site') { 
      $idea_node_edit_page = TRUE;
    }
  }
  
  if ( $idea_node_add_page || $idea_node_edit_page ) { 
      $paths['node/*/edit'] = FALSE;
      $paths['node/add/*'] = FALSE;
  }

}

/**
 * Implementation of hook_permission().
 */
function ideation_permission() {
  return array(
    'administer special idea fields' => array(
      'title' => t('Administer Special Idea Fields'),
      'description' => t("Allows the user to update an idea node's <em>watch</em> and <em>status</em> settings."),
    ),
  );
}


/**
 * Implementation of hook_theme()
 */
function ideation_theme() {
    return array( 
  
    'ideation_fivestar_widget' => array(
      'variables' => array('form' => NULL, ''),
      'template'  => 'ideation_fivestar_widget',
    ),

    'ideation_fivestar_static' => array(
      'template'  => 'ideation_fivestar_static',
      'variables' => array('rating' => NULL, 'stars' => 5, 'tag' => 'vote'),
    ),

    'ideation_node_idea' => array(
      'template'  => 'ideation_node_idea',
    ),

    // Theme for the formatter.   
    'ideation_formatter_linked' => array(
      'variables' => array('element' => NULL, 'field' => NULL),
    ),
    
    'ideation_box' => array(
      'variables' => array('block_body' => NULL),
    ),
    
  );
}


// @TODO figure out why values aren't passing in here
// This is the preprocessor for theming fivestar when viewed anonymously 
function ideation_preprocess_fivestar_static(&$vars) {
  // drupal_set_message('<pre>'. print_r($vars,TRUE) .'</pre>');
  $vars['theme_hook_suggestions'][] = 'ideation_fivestar_static';
  $vars['class'] = 'some-class';
  $vars['cast'] = 1;
  $vars['avg'] = 10;
}

function ideation_preprocess_fivestar_widget(&$vars) {
  // Only print out the summary if text is being displayed or using rollover text.
  if (empty($vars['form']['vote']['#description']) && strpos($vars['form']['vote']['#prefix'], 'fivestar-labels-hover') === FALSE) {
    unset($vars['form']['vote']['#description']);
  }

  $class = 'fivestar-form';
  $class .= '-'. (isset($vars['form']['vote']['#tag']) ? $vars['form']['vote']['#tag'] : 'vote');
  $class .= '-'. (isset($vars['form']['content_id']['#value']) ? $vars['form']['content_id']['#value'] : 0);

  $vars['class'] = $class;
  $vars['cast'] = $vars['form']['vote']['vote_count']['#value'];
  $vars['avg'] = $vars['form']['vote']['vote_average']['#value'] ? ($vars['form']['vote']['vote_average']['#value'] / 100) * 5 : 0;

  drupal_add_js(drupal_get_path('module', 'ideation') .'/ideation.js', 'file');
  $vars['theme_hook_suggestions'][] = 'ideation_fivestar_widget';
}

function ideation_preprocess_node(&$vars) {
  if($vars['node']->type === 'idea_site'){
    $vars['theme_hook_suggestions'][] = 'ideation_node_idea';
    $vars['user_picture']   = theme('image', array('path' => drupal_get_path('module', 'ideation') .'/user.png'));
    $vars['idea_submitted'] = "<div class='byline'>{$vars['name']}</div><div class='date'>{$vars['date']}</div>";
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ideation_field_formatter_info() {
  return array(
    // the key must be unique, so it's best to prefix with your module's name.
    'ideation_field' => array(
      // the label is is what is displayed in the select box in the UI.
      'label' => t('Ideation Field'),
      // field types is the important bit!! List the field types your formatter is for.
      'field types' => array('list_text', 'list_boolean'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view(). This code just passes straight
 * through to a theme function, MYMODULE_formatter_FORMATTER
 * (e.g. MYMODULE_formatter_MYMODULE_absolute_url).
 */
function ideation_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if($display['type'] === 'ideation_field') {
    $elements = array();
    foreach ($items as $delta => $item) {
      $elements[$delta] = array(
        '#markup' => theme('ideation_formatter_linked', array('element' => $item, 'field' => $field)),
      );
    }
 }
 return $elements;
}

/**
 * Theme function for 'Ideas linked' field formatter.
 */
function theme_ideation_formatter_linked($variables) {
  // Very much a one-use implementation.
  // Path of view which has exposed filters
  $path = 'ideas/recent';
  $links = array();
  $element = $variables['element'];
  $field_name = $variables['field']['field_name'];
  
  switch($field_name) {
    case 'field_idea_categories':
      $q = 'categories';
      break;
    case 'field_idea_status':
      $q = 'status';
      break;
    case 'field_idea_watch':
      $q = 'watch';
      break;
  }
  
  foreach ($element as $key => $value) {
    if ($value) {
      // Hack to display nothing if a node is not an "Idea We're Watching"
      if ($field_name === 'field_idea_watch') {
        if($value == '0') {
          continue;
        }
        else{
          $value = t("Watched");
        }
      }     
      $links[] = l(t(decode_entities($value)), $path, array('query' => array($q => decode_entities($value))));
    }
  }
  return implode(', ', $links);
}

function theme_ideation_box($variables) {
  return $variables['block_body'] . l(t('Submit an idea'), 'node/add/idea-site');
}

/**
 * Implementation of hook_block_view_MODULE_DELTA_alter().
 */
function ideation_block_view_views_5996f5cc8467b404a194242c0f6379a8_alter(&$data, $block) {
  $data['subject'] = t('Search Filter');
}

/**
 * Implementation of hook_form_alter().
 * @TODO: Check this is funtioning as intended (TRS)
 */
function ideation_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  
  switch ($form_id) {
    case 'views_exposed_form':
      if ($form['#id'] == 'views-exposed-form-ideas-listing-page-1') {
        // Does not make sense to show two options for the "Ideas We're Watching"
        // checkbox, so remove the toggle-off option and just provide a single
        // checkbox.
        if (is_array($form['watch']['#options'])) {
          foreach ($form['watch']['#options'] as $key => $val) {
            if ($val == 'Off') {
              unset($form['watch']['#options'][$key]);
            }
          }
        }
        // Ugly hack to make the exposed filter block work on both ideas/recent
        // and on ideas/votes.  Otherwise, ideas/votes redirects to /ideas/recent
        // when filtering.
        if (arg(1) == 'votes') {
          $form['#action'] = str_replace('recent', 'votes', $form['#action']);
        }
      }
      break;
    case ideation_IDEA_TYPE_SITE . '_node_form':
      // Only allow site admins or managers of the active group to edit the
      // "Ideas We're Watching" and "Implementation Status" fields
      $account = $user;
      $access = FALSE;
      if (user_access('administer special idea fields')) {
        $access = TRUE;
      }
      // If $access is still false, deny access to special fields.
      if (!$access) {
        $form['field_idea_watch']['#access'] = FALSE;
        $form['field_idea_status']['#access'] = FALSE;
      }
      break;
  }
}

function ideation_block_info() {
  $blocks['ideation_box'] = array(
    'info' => t('Ideation: Callout Box'), 
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['ideation_submit_idea'] = array(
    'info' => t('Ideation: Submit an Idea'), 
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}


function ideation_block_view($delta = '') {
  drupal_add_js(drupal_get_path('module', 'ideation') .'/ideation.fout.js', array('weight' => 20));
  $block = array();

  switch ($delta) {
    case 'ideation_box':
      $block['subject'] = t('Have an Idea?');
      // @todo Allow block_body to be overridden in block_configuration
      $block_body = '<span class="ideation-box-1">Have an idea?</span> <span class="ideation-box-2">We want to hear it!</span> ';
      $block['content'] = theme('ideation_box', array('block_body' => $block_body));
      break;
    case 'ideation_submit_idea':
      $block['subject'] = t('Submit an Idea');
      $block['content'] = l(t('Submit an idea'), 'node/add/idea-site');
      break;
  }
  return $block;

}